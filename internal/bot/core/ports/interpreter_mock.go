package ports

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/capcom6/homework-2/internal/bot/core/ports.InterpreterService -o ./internal/bot/core/ports/interpreter_mock.go -n InterpreterServiceMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/capcom6/homework-2/internal/bot/core/domain"
)

// InterpreterServiceMock implements InterpreterService
type InterpreterServiceMock struct {
	t minimock.Tester

	funcProcess          func(ctx context.Context, userId string, msg string) (a1 domain.Answer, err error)
	inspectFuncProcess   func(ctx context.Context, userId string, msg string)
	afterProcessCounter  uint64
	beforeProcessCounter uint64
	ProcessMock          mInterpreterServiceMockProcess
}

// NewInterpreterServiceMock returns a mock for InterpreterService
func NewInterpreterServiceMock(t minimock.Tester) *InterpreterServiceMock {
	m := &InterpreterServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ProcessMock = mInterpreterServiceMockProcess{mock: m}
	m.ProcessMock.callArgs = []*InterpreterServiceMockProcessParams{}

	return m
}

type mInterpreterServiceMockProcess struct {
	mock               *InterpreterServiceMock
	defaultExpectation *InterpreterServiceMockProcessExpectation
	expectations       []*InterpreterServiceMockProcessExpectation

	callArgs []*InterpreterServiceMockProcessParams
	mutex    sync.RWMutex
}

// InterpreterServiceMockProcessExpectation specifies expectation struct of the InterpreterService.Process
type InterpreterServiceMockProcessExpectation struct {
	mock    *InterpreterServiceMock
	params  *InterpreterServiceMockProcessParams
	results *InterpreterServiceMockProcessResults
	Counter uint64
}

// InterpreterServiceMockProcessParams contains parameters of the InterpreterService.Process
type InterpreterServiceMockProcessParams struct {
	ctx    context.Context
	userId string
	msg    string
}

// InterpreterServiceMockProcessResults contains results of the InterpreterService.Process
type InterpreterServiceMockProcessResults struct {
	a1  domain.Answer
	err error
}

// Expect sets up expected params for InterpreterService.Process
func (mmProcess *mInterpreterServiceMockProcess) Expect(ctx context.Context, userId string, msg string) *mInterpreterServiceMockProcess {
	if mmProcess.mock.funcProcess != nil {
		mmProcess.mock.t.Fatalf("InterpreterServiceMock.Process mock is already set by Set")
	}

	if mmProcess.defaultExpectation == nil {
		mmProcess.defaultExpectation = &InterpreterServiceMockProcessExpectation{}
	}

	mmProcess.defaultExpectation.params = &InterpreterServiceMockProcessParams{ctx, userId, msg}
	for _, e := range mmProcess.expectations {
		if minimock.Equal(e.params, mmProcess.defaultExpectation.params) {
			mmProcess.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProcess.defaultExpectation.params)
		}
	}

	return mmProcess
}

// Inspect accepts an inspector function that has same arguments as the InterpreterService.Process
func (mmProcess *mInterpreterServiceMockProcess) Inspect(f func(ctx context.Context, userId string, msg string)) *mInterpreterServiceMockProcess {
	if mmProcess.mock.inspectFuncProcess != nil {
		mmProcess.mock.t.Fatalf("Inspect function is already set for InterpreterServiceMock.Process")
	}

	mmProcess.mock.inspectFuncProcess = f

	return mmProcess
}

// Return sets up results that will be returned by InterpreterService.Process
func (mmProcess *mInterpreterServiceMockProcess) Return(a1 domain.Answer, err error) *InterpreterServiceMock {
	if mmProcess.mock.funcProcess != nil {
		mmProcess.mock.t.Fatalf("InterpreterServiceMock.Process mock is already set by Set")
	}

	if mmProcess.defaultExpectation == nil {
		mmProcess.defaultExpectation = &InterpreterServiceMockProcessExpectation{mock: mmProcess.mock}
	}
	mmProcess.defaultExpectation.results = &InterpreterServiceMockProcessResults{a1, err}
	return mmProcess.mock
}

//Set uses given function f to mock the InterpreterService.Process method
func (mmProcess *mInterpreterServiceMockProcess) Set(f func(ctx context.Context, userId string, msg string) (a1 domain.Answer, err error)) *InterpreterServiceMock {
	if mmProcess.defaultExpectation != nil {
		mmProcess.mock.t.Fatalf("Default expectation is already set for the InterpreterService.Process method")
	}

	if len(mmProcess.expectations) > 0 {
		mmProcess.mock.t.Fatalf("Some expectations are already set for the InterpreterService.Process method")
	}

	mmProcess.mock.funcProcess = f
	return mmProcess.mock
}

// When sets expectation for the InterpreterService.Process which will trigger the result defined by the following
// Then helper
func (mmProcess *mInterpreterServiceMockProcess) When(ctx context.Context, userId string, msg string) *InterpreterServiceMockProcessExpectation {
	if mmProcess.mock.funcProcess != nil {
		mmProcess.mock.t.Fatalf("InterpreterServiceMock.Process mock is already set by Set")
	}

	expectation := &InterpreterServiceMockProcessExpectation{
		mock:   mmProcess.mock,
		params: &InterpreterServiceMockProcessParams{ctx, userId, msg},
	}
	mmProcess.expectations = append(mmProcess.expectations, expectation)
	return expectation
}

// Then sets up InterpreterService.Process return parameters for the expectation previously defined by the When method
func (e *InterpreterServiceMockProcessExpectation) Then(a1 domain.Answer, err error) *InterpreterServiceMock {
	e.results = &InterpreterServiceMockProcessResults{a1, err}
	return e.mock
}

// Process implements InterpreterService
func (mmProcess *InterpreterServiceMock) Process(ctx context.Context, userId string, msg string) (a1 domain.Answer, err error) {
	mm_atomic.AddUint64(&mmProcess.beforeProcessCounter, 1)
	defer mm_atomic.AddUint64(&mmProcess.afterProcessCounter, 1)

	if mmProcess.inspectFuncProcess != nil {
		mmProcess.inspectFuncProcess(ctx, userId, msg)
	}

	mm_params := &InterpreterServiceMockProcessParams{ctx, userId, msg}

	// Record call args
	mmProcess.ProcessMock.mutex.Lock()
	mmProcess.ProcessMock.callArgs = append(mmProcess.ProcessMock.callArgs, mm_params)
	mmProcess.ProcessMock.mutex.Unlock()

	for _, e := range mmProcess.ProcessMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1, e.results.err
		}
	}

	if mmProcess.ProcessMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProcess.ProcessMock.defaultExpectation.Counter, 1)
		mm_want := mmProcess.ProcessMock.defaultExpectation.params
		mm_got := InterpreterServiceMockProcessParams{ctx, userId, msg}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProcess.t.Errorf("InterpreterServiceMock.Process got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProcess.ProcessMock.defaultExpectation.results
		if mm_results == nil {
			mmProcess.t.Fatal("No results are set for the InterpreterServiceMock.Process")
		}
		return (*mm_results).a1, (*mm_results).err
	}
	if mmProcess.funcProcess != nil {
		return mmProcess.funcProcess(ctx, userId, msg)
	}
	mmProcess.t.Fatalf("Unexpected call to InterpreterServiceMock.Process. %v %v %v", ctx, userId, msg)
	return
}

// ProcessAfterCounter returns a count of finished InterpreterServiceMock.Process invocations
func (mmProcess *InterpreterServiceMock) ProcessAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProcess.afterProcessCounter)
}

// ProcessBeforeCounter returns a count of InterpreterServiceMock.Process invocations
func (mmProcess *InterpreterServiceMock) ProcessBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProcess.beforeProcessCounter)
}

// Calls returns a list of arguments used in each call to InterpreterServiceMock.Process.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProcess *mInterpreterServiceMockProcess) Calls() []*InterpreterServiceMockProcessParams {
	mmProcess.mutex.RLock()

	argCopy := make([]*InterpreterServiceMockProcessParams, len(mmProcess.callArgs))
	copy(argCopy, mmProcess.callArgs)

	mmProcess.mutex.RUnlock()

	return argCopy
}

// MinimockProcessDone returns true if the count of the Process invocations corresponds
// the number of defined expectations
func (m *InterpreterServiceMock) MinimockProcessDone() bool {
	for _, e := range m.ProcessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProcessMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProcessCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProcess != nil && mm_atomic.LoadUint64(&m.afterProcessCounter) < 1 {
		return false
	}
	return true
}

// MinimockProcessInspect logs each unmet expectation
func (m *InterpreterServiceMock) MinimockProcessInspect() {
	for _, e := range m.ProcessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to InterpreterServiceMock.Process with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProcessMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProcessCounter) < 1 {
		if m.ProcessMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to InterpreterServiceMock.Process")
		} else {
			m.t.Errorf("Expected call to InterpreterServiceMock.Process with params: %#v", *m.ProcessMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProcess != nil && mm_atomic.LoadUint64(&m.afterProcessCounter) < 1 {
		m.t.Error("Expected call to InterpreterServiceMock.Process")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *InterpreterServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockProcessInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *InterpreterServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *InterpreterServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockProcessDone()
}
