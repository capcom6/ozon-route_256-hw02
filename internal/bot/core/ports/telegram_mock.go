package ports

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/capcom6/homework-2/internal/bot/core/ports.TelegramService -o ./internal/bot/core/ports/telegram_mock.go -n TelegramServiceMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/capcom6/homework-2/pkg/telegram"
)

// TelegramServiceMock implements TelegramService
type TelegramServiceMock struct {
	t minimock.Tester

	funcDeleteMessage          func(msg *telegram.DeleteMessage) (err error)
	inspectFuncDeleteMessage   func(msg *telegram.DeleteMessage)
	afterDeleteMessageCounter  uint64
	beforeDeleteMessageCounter uint64
	DeleteMessageMock          mTelegramServiceMockDeleteMessage

	funcSendMessage          func(msg *telegram.SendMessage) (err error)
	inspectFuncSendMessage   func(msg *telegram.SendMessage)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mTelegramServiceMockSendMessage
}

// NewTelegramServiceMock returns a mock for TelegramService
func NewTelegramServiceMock(t minimock.Tester) *TelegramServiceMock {
	m := &TelegramServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteMessageMock = mTelegramServiceMockDeleteMessage{mock: m}
	m.DeleteMessageMock.callArgs = []*TelegramServiceMockDeleteMessageParams{}

	m.SendMessageMock = mTelegramServiceMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*TelegramServiceMockSendMessageParams{}

	return m
}

type mTelegramServiceMockDeleteMessage struct {
	mock               *TelegramServiceMock
	defaultExpectation *TelegramServiceMockDeleteMessageExpectation
	expectations       []*TelegramServiceMockDeleteMessageExpectation

	callArgs []*TelegramServiceMockDeleteMessageParams
	mutex    sync.RWMutex
}

// TelegramServiceMockDeleteMessageExpectation specifies expectation struct of the TelegramService.DeleteMessage
type TelegramServiceMockDeleteMessageExpectation struct {
	mock    *TelegramServiceMock
	params  *TelegramServiceMockDeleteMessageParams
	results *TelegramServiceMockDeleteMessageResults
	Counter uint64
}

// TelegramServiceMockDeleteMessageParams contains parameters of the TelegramService.DeleteMessage
type TelegramServiceMockDeleteMessageParams struct {
	msg *telegram.DeleteMessage
}

// TelegramServiceMockDeleteMessageResults contains results of the TelegramService.DeleteMessage
type TelegramServiceMockDeleteMessageResults struct {
	err error
}

// Expect sets up expected params for TelegramService.DeleteMessage
func (mmDeleteMessage *mTelegramServiceMockDeleteMessage) Expect(msg *telegram.DeleteMessage) *mTelegramServiceMockDeleteMessage {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("TelegramServiceMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &TelegramServiceMockDeleteMessageExpectation{}
	}

	mmDeleteMessage.defaultExpectation.params = &TelegramServiceMockDeleteMessageParams{msg}
	for _, e := range mmDeleteMessage.expectations {
		if minimock.Equal(e.params, mmDeleteMessage.defaultExpectation.params) {
			mmDeleteMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteMessage.defaultExpectation.params)
		}
	}

	return mmDeleteMessage
}

// Inspect accepts an inspector function that has same arguments as the TelegramService.DeleteMessage
func (mmDeleteMessage *mTelegramServiceMockDeleteMessage) Inspect(f func(msg *telegram.DeleteMessage)) *mTelegramServiceMockDeleteMessage {
	if mmDeleteMessage.mock.inspectFuncDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("Inspect function is already set for TelegramServiceMock.DeleteMessage")
	}

	mmDeleteMessage.mock.inspectFuncDeleteMessage = f

	return mmDeleteMessage
}

// Return sets up results that will be returned by TelegramService.DeleteMessage
func (mmDeleteMessage *mTelegramServiceMockDeleteMessage) Return(err error) *TelegramServiceMock {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("TelegramServiceMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &TelegramServiceMockDeleteMessageExpectation{mock: mmDeleteMessage.mock}
	}
	mmDeleteMessage.defaultExpectation.results = &TelegramServiceMockDeleteMessageResults{err}
	return mmDeleteMessage.mock
}

//Set uses given function f to mock the TelegramService.DeleteMessage method
func (mmDeleteMessage *mTelegramServiceMockDeleteMessage) Set(f func(msg *telegram.DeleteMessage) (err error)) *TelegramServiceMock {
	if mmDeleteMessage.defaultExpectation != nil {
		mmDeleteMessage.mock.t.Fatalf("Default expectation is already set for the TelegramService.DeleteMessage method")
	}

	if len(mmDeleteMessage.expectations) > 0 {
		mmDeleteMessage.mock.t.Fatalf("Some expectations are already set for the TelegramService.DeleteMessage method")
	}

	mmDeleteMessage.mock.funcDeleteMessage = f
	return mmDeleteMessage.mock
}

// When sets expectation for the TelegramService.DeleteMessage which will trigger the result defined by the following
// Then helper
func (mmDeleteMessage *mTelegramServiceMockDeleteMessage) When(msg *telegram.DeleteMessage) *TelegramServiceMockDeleteMessageExpectation {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("TelegramServiceMock.DeleteMessage mock is already set by Set")
	}

	expectation := &TelegramServiceMockDeleteMessageExpectation{
		mock:   mmDeleteMessage.mock,
		params: &TelegramServiceMockDeleteMessageParams{msg},
	}
	mmDeleteMessage.expectations = append(mmDeleteMessage.expectations, expectation)
	return expectation
}

// Then sets up TelegramService.DeleteMessage return parameters for the expectation previously defined by the When method
func (e *TelegramServiceMockDeleteMessageExpectation) Then(err error) *TelegramServiceMock {
	e.results = &TelegramServiceMockDeleteMessageResults{err}
	return e.mock
}

// DeleteMessage implements TelegramService
func (mmDeleteMessage *TelegramServiceMock) DeleteMessage(msg *telegram.DeleteMessage) (err error) {
	mm_atomic.AddUint64(&mmDeleteMessage.beforeDeleteMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteMessage.afterDeleteMessageCounter, 1)

	if mmDeleteMessage.inspectFuncDeleteMessage != nil {
		mmDeleteMessage.inspectFuncDeleteMessage(msg)
	}

	mm_params := &TelegramServiceMockDeleteMessageParams{msg}

	// Record call args
	mmDeleteMessage.DeleteMessageMock.mutex.Lock()
	mmDeleteMessage.DeleteMessageMock.callArgs = append(mmDeleteMessage.DeleteMessageMock.callArgs, mm_params)
	mmDeleteMessage.DeleteMessageMock.mutex.Unlock()

	for _, e := range mmDeleteMessage.DeleteMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteMessage.DeleteMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteMessage.DeleteMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteMessage.DeleteMessageMock.defaultExpectation.params
		mm_got := TelegramServiceMockDeleteMessageParams{msg}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteMessage.t.Errorf("TelegramServiceMock.DeleteMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteMessage.DeleteMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteMessage.t.Fatal("No results are set for the TelegramServiceMock.DeleteMessage")
		}
		return (*mm_results).err
	}
	if mmDeleteMessage.funcDeleteMessage != nil {
		return mmDeleteMessage.funcDeleteMessage(msg)
	}
	mmDeleteMessage.t.Fatalf("Unexpected call to TelegramServiceMock.DeleteMessage. %v", msg)
	return
}

// DeleteMessageAfterCounter returns a count of finished TelegramServiceMock.DeleteMessage invocations
func (mmDeleteMessage *TelegramServiceMock) DeleteMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteMessage.afterDeleteMessageCounter)
}

// DeleteMessageBeforeCounter returns a count of TelegramServiceMock.DeleteMessage invocations
func (mmDeleteMessage *TelegramServiceMock) DeleteMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteMessage.beforeDeleteMessageCounter)
}

// Calls returns a list of arguments used in each call to TelegramServiceMock.DeleteMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteMessage *mTelegramServiceMockDeleteMessage) Calls() []*TelegramServiceMockDeleteMessageParams {
	mmDeleteMessage.mutex.RLock()

	argCopy := make([]*TelegramServiceMockDeleteMessageParams, len(mmDeleteMessage.callArgs))
	copy(argCopy, mmDeleteMessage.callArgs)

	mmDeleteMessage.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteMessageDone returns true if the count of the DeleteMessage invocations corresponds
// the number of defined expectations
func (m *TelegramServiceMock) MinimockDeleteMessageDone() bool {
	for _, e := range m.DeleteMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteMessage != nil && mm_atomic.LoadUint64(&m.afterDeleteMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteMessageInspect logs each unmet expectation
func (m *TelegramServiceMock) MinimockDeleteMessageInspect() {
	for _, e := range m.DeleteMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TelegramServiceMock.DeleteMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteMessageCounter) < 1 {
		if m.DeleteMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TelegramServiceMock.DeleteMessage")
		} else {
			m.t.Errorf("Expected call to TelegramServiceMock.DeleteMessage with params: %#v", *m.DeleteMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteMessage != nil && mm_atomic.LoadUint64(&m.afterDeleteMessageCounter) < 1 {
		m.t.Error("Expected call to TelegramServiceMock.DeleteMessage")
	}
}

type mTelegramServiceMockSendMessage struct {
	mock               *TelegramServiceMock
	defaultExpectation *TelegramServiceMockSendMessageExpectation
	expectations       []*TelegramServiceMockSendMessageExpectation

	callArgs []*TelegramServiceMockSendMessageParams
	mutex    sync.RWMutex
}

// TelegramServiceMockSendMessageExpectation specifies expectation struct of the TelegramService.SendMessage
type TelegramServiceMockSendMessageExpectation struct {
	mock    *TelegramServiceMock
	params  *TelegramServiceMockSendMessageParams
	results *TelegramServiceMockSendMessageResults
	Counter uint64
}

// TelegramServiceMockSendMessageParams contains parameters of the TelegramService.SendMessage
type TelegramServiceMockSendMessageParams struct {
	msg *telegram.SendMessage
}

// TelegramServiceMockSendMessageResults contains results of the TelegramService.SendMessage
type TelegramServiceMockSendMessageResults struct {
	err error
}

// Expect sets up expected params for TelegramService.SendMessage
func (mmSendMessage *mTelegramServiceMockSendMessage) Expect(msg *telegram.SendMessage) *mTelegramServiceMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("TelegramServiceMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &TelegramServiceMockSendMessageExpectation{}
	}

	mmSendMessage.defaultExpectation.params = &TelegramServiceMockSendMessageParams{msg}
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the TelegramService.SendMessage
func (mmSendMessage *mTelegramServiceMockSendMessage) Inspect(f func(msg *telegram.SendMessage)) *mTelegramServiceMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for TelegramServiceMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by TelegramService.SendMessage
func (mmSendMessage *mTelegramServiceMockSendMessage) Return(err error) *TelegramServiceMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("TelegramServiceMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &TelegramServiceMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &TelegramServiceMockSendMessageResults{err}
	return mmSendMessage.mock
}

//Set uses given function f to mock the TelegramService.SendMessage method
func (mmSendMessage *mTelegramServiceMockSendMessage) Set(f func(msg *telegram.SendMessage) (err error)) *TelegramServiceMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the TelegramService.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the TelegramService.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	return mmSendMessage.mock
}

// When sets expectation for the TelegramService.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mTelegramServiceMockSendMessage) When(msg *telegram.SendMessage) *TelegramServiceMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("TelegramServiceMock.SendMessage mock is already set by Set")
	}

	expectation := &TelegramServiceMockSendMessageExpectation{
		mock:   mmSendMessage.mock,
		params: &TelegramServiceMockSendMessageParams{msg},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up TelegramService.SendMessage return parameters for the expectation previously defined by the When method
func (e *TelegramServiceMockSendMessageExpectation) Then(err error) *TelegramServiceMock {
	e.results = &TelegramServiceMockSendMessageResults{err}
	return e.mock
}

// SendMessage implements TelegramService
func (mmSendMessage *TelegramServiceMock) SendMessage(msg *telegram.SendMessage) (err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(msg)
	}

	mm_params := &TelegramServiceMockSendMessageParams{msg}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_got := TelegramServiceMockSendMessageParams{msg}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("TelegramServiceMock.SendMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the TelegramServiceMock.SendMessage")
		}
		return (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(msg)
	}
	mmSendMessage.t.Fatalf("Unexpected call to TelegramServiceMock.SendMessage. %v", msg)
	return
}

// SendMessageAfterCounter returns a count of finished TelegramServiceMock.SendMessage invocations
func (mmSendMessage *TelegramServiceMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of TelegramServiceMock.SendMessage invocations
func (mmSendMessage *TelegramServiceMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to TelegramServiceMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mTelegramServiceMockSendMessage) Calls() []*TelegramServiceMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*TelegramServiceMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *TelegramServiceMock) MinimockSendMessageDone() bool {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *TelegramServiceMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TelegramServiceMock.SendMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TelegramServiceMock.SendMessage")
		} else {
			m.t.Errorf("Expected call to TelegramServiceMock.SendMessage with params: %#v", *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		m.t.Error("Expected call to TelegramServiceMock.SendMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TelegramServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDeleteMessageInspect()

		m.MinimockSendMessageInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TelegramServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TelegramServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteMessageDone() &&
		m.MinimockSendMessageDone()
}
