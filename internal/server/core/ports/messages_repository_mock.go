package ports

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/capcom6/homework-2/internal/server/core/ports.MessagesRepository -o ./internal/server/core/ports/messages_repository_mock.go -n MessagesRepositoryMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/capcom6/homework-2/internal/server/core/domain"
)

// MessagesRepositoryMock implements MessagesRepository
type MessagesRepositoryMock struct {
	t minimock.Tester

	funcPull          func(targets []domain.Mailbox) (ma1 []domain.Message, err error)
	inspectFuncPull   func(targets []domain.Mailbox)
	afterPullCounter  uint64
	beforePullCounter uint64
	PullMock          mMessagesRepositoryMockPull
}

// NewMessagesRepositoryMock returns a mock for MessagesRepository
func NewMessagesRepositoryMock(t minimock.Tester) *MessagesRepositoryMock {
	m := &MessagesRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PullMock = mMessagesRepositoryMockPull{mock: m}
	m.PullMock.callArgs = []*MessagesRepositoryMockPullParams{}

	return m
}

type mMessagesRepositoryMockPull struct {
	mock               *MessagesRepositoryMock
	defaultExpectation *MessagesRepositoryMockPullExpectation
	expectations       []*MessagesRepositoryMockPullExpectation

	callArgs []*MessagesRepositoryMockPullParams
	mutex    sync.RWMutex
}

// MessagesRepositoryMockPullExpectation specifies expectation struct of the MessagesRepository.Pull
type MessagesRepositoryMockPullExpectation struct {
	mock    *MessagesRepositoryMock
	params  *MessagesRepositoryMockPullParams
	results *MessagesRepositoryMockPullResults
	Counter uint64
}

// MessagesRepositoryMockPullParams contains parameters of the MessagesRepository.Pull
type MessagesRepositoryMockPullParams struct {
	targets []domain.Mailbox
}

// MessagesRepositoryMockPullResults contains results of the MessagesRepository.Pull
type MessagesRepositoryMockPullResults struct {
	ma1 []domain.Message
	err error
}

// Expect sets up expected params for MessagesRepository.Pull
func (mmPull *mMessagesRepositoryMockPull) Expect(targets []domain.Mailbox) *mMessagesRepositoryMockPull {
	if mmPull.mock.funcPull != nil {
		mmPull.mock.t.Fatalf("MessagesRepositoryMock.Pull mock is already set by Set")
	}

	if mmPull.defaultExpectation == nil {
		mmPull.defaultExpectation = &MessagesRepositoryMockPullExpectation{}
	}

	mmPull.defaultExpectation.params = &MessagesRepositoryMockPullParams{targets}
	for _, e := range mmPull.expectations {
		if minimock.Equal(e.params, mmPull.defaultExpectation.params) {
			mmPull.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPull.defaultExpectation.params)
		}
	}

	return mmPull
}

// Inspect accepts an inspector function that has same arguments as the MessagesRepository.Pull
func (mmPull *mMessagesRepositoryMockPull) Inspect(f func(targets []domain.Mailbox)) *mMessagesRepositoryMockPull {
	if mmPull.mock.inspectFuncPull != nil {
		mmPull.mock.t.Fatalf("Inspect function is already set for MessagesRepositoryMock.Pull")
	}

	mmPull.mock.inspectFuncPull = f

	return mmPull
}

// Return sets up results that will be returned by MessagesRepository.Pull
func (mmPull *mMessagesRepositoryMockPull) Return(ma1 []domain.Message, err error) *MessagesRepositoryMock {
	if mmPull.mock.funcPull != nil {
		mmPull.mock.t.Fatalf("MessagesRepositoryMock.Pull mock is already set by Set")
	}

	if mmPull.defaultExpectation == nil {
		mmPull.defaultExpectation = &MessagesRepositoryMockPullExpectation{mock: mmPull.mock}
	}
	mmPull.defaultExpectation.results = &MessagesRepositoryMockPullResults{ma1, err}
	return mmPull.mock
}

//Set uses given function f to mock the MessagesRepository.Pull method
func (mmPull *mMessagesRepositoryMockPull) Set(f func(targets []domain.Mailbox) (ma1 []domain.Message, err error)) *MessagesRepositoryMock {
	if mmPull.defaultExpectation != nil {
		mmPull.mock.t.Fatalf("Default expectation is already set for the MessagesRepository.Pull method")
	}

	if len(mmPull.expectations) > 0 {
		mmPull.mock.t.Fatalf("Some expectations are already set for the MessagesRepository.Pull method")
	}

	mmPull.mock.funcPull = f
	return mmPull.mock
}

// When sets expectation for the MessagesRepository.Pull which will trigger the result defined by the following
// Then helper
func (mmPull *mMessagesRepositoryMockPull) When(targets []domain.Mailbox) *MessagesRepositoryMockPullExpectation {
	if mmPull.mock.funcPull != nil {
		mmPull.mock.t.Fatalf("MessagesRepositoryMock.Pull mock is already set by Set")
	}

	expectation := &MessagesRepositoryMockPullExpectation{
		mock:   mmPull.mock,
		params: &MessagesRepositoryMockPullParams{targets},
	}
	mmPull.expectations = append(mmPull.expectations, expectation)
	return expectation
}

// Then sets up MessagesRepository.Pull return parameters for the expectation previously defined by the When method
func (e *MessagesRepositoryMockPullExpectation) Then(ma1 []domain.Message, err error) *MessagesRepositoryMock {
	e.results = &MessagesRepositoryMockPullResults{ma1, err}
	return e.mock
}

// Pull implements MessagesRepository
func (mmPull *MessagesRepositoryMock) Pull(targets []domain.Mailbox) (ma1 []domain.Message, err error) {
	mm_atomic.AddUint64(&mmPull.beforePullCounter, 1)
	defer mm_atomic.AddUint64(&mmPull.afterPullCounter, 1)

	if mmPull.inspectFuncPull != nil {
		mmPull.inspectFuncPull(targets)
	}

	mm_params := &MessagesRepositoryMockPullParams{targets}

	// Record call args
	mmPull.PullMock.mutex.Lock()
	mmPull.PullMock.callArgs = append(mmPull.PullMock.callArgs, mm_params)
	mmPull.PullMock.mutex.Unlock()

	for _, e := range mmPull.PullMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ma1, e.results.err
		}
	}

	if mmPull.PullMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPull.PullMock.defaultExpectation.Counter, 1)
		mm_want := mmPull.PullMock.defaultExpectation.params
		mm_got := MessagesRepositoryMockPullParams{targets}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPull.t.Errorf("MessagesRepositoryMock.Pull got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPull.PullMock.defaultExpectation.results
		if mm_results == nil {
			mmPull.t.Fatal("No results are set for the MessagesRepositoryMock.Pull")
		}
		return (*mm_results).ma1, (*mm_results).err
	}
	if mmPull.funcPull != nil {
		return mmPull.funcPull(targets)
	}
	mmPull.t.Fatalf("Unexpected call to MessagesRepositoryMock.Pull. %v", targets)
	return
}

// PullAfterCounter returns a count of finished MessagesRepositoryMock.Pull invocations
func (mmPull *MessagesRepositoryMock) PullAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPull.afterPullCounter)
}

// PullBeforeCounter returns a count of MessagesRepositoryMock.Pull invocations
func (mmPull *MessagesRepositoryMock) PullBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPull.beforePullCounter)
}

// Calls returns a list of arguments used in each call to MessagesRepositoryMock.Pull.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPull *mMessagesRepositoryMockPull) Calls() []*MessagesRepositoryMockPullParams {
	mmPull.mutex.RLock()

	argCopy := make([]*MessagesRepositoryMockPullParams, len(mmPull.callArgs))
	copy(argCopy, mmPull.callArgs)

	mmPull.mutex.RUnlock()

	return argCopy
}

// MinimockPullDone returns true if the count of the Pull invocations corresponds
// the number of defined expectations
func (m *MessagesRepositoryMock) MinimockPullDone() bool {
	for _, e := range m.PullMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PullMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPullCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPull != nil && mm_atomic.LoadUint64(&m.afterPullCounter) < 1 {
		return false
	}
	return true
}

// MinimockPullInspect logs each unmet expectation
func (m *MessagesRepositoryMock) MinimockPullInspect() {
	for _, e := range m.PullMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessagesRepositoryMock.Pull with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PullMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPullCounter) < 1 {
		if m.PullMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessagesRepositoryMock.Pull")
		} else {
			m.t.Errorf("Expected call to MessagesRepositoryMock.Pull with params: %#v", *m.PullMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPull != nil && mm_atomic.LoadUint64(&m.afterPullCounter) < 1 {
		m.t.Error("Expected call to MessagesRepositoryMock.Pull")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MessagesRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockPullInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MessagesRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MessagesRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPullDone()
}
