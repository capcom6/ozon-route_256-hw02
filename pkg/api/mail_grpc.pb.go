// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/mail.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailAggregatorClient is the client API for MailAggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailAggregatorClient interface {
	Create(ctx context.Context, in *MailboxCreate, opts ...grpc.CallOption) (*MailboxOut, error)
	Get(ctx context.Context, in *MailboxGet, opts ...grpc.CallOption) (*Mailboxes, error)
	Delete(ctx context.Context, in *MailboxId, opts ...grpc.CallOption) (*Mailboxes, error)
	Pull(ctx context.Context, in *MailboxGet, opts ...grpc.CallOption) (*Messages, error)
}

type mailAggregatorClient struct {
	cc grpc.ClientConnInterface
}

func NewMailAggregatorClient(cc grpc.ClientConnInterface) MailAggregatorClient {
	return &mailAggregatorClient{cc}
}

func (c *mailAggregatorClient) Create(ctx context.Context, in *MailboxCreate, opts ...grpc.CallOption) (*MailboxOut, error) {
	out := new(MailboxOut)
	err := c.cc.Invoke(ctx, "/api.MailAggregator/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailAggregatorClient) Get(ctx context.Context, in *MailboxGet, opts ...grpc.CallOption) (*Mailboxes, error) {
	out := new(Mailboxes)
	err := c.cc.Invoke(ctx, "/api.MailAggregator/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailAggregatorClient) Delete(ctx context.Context, in *MailboxId, opts ...grpc.CallOption) (*Mailboxes, error) {
	out := new(Mailboxes)
	err := c.cc.Invoke(ctx, "/api.MailAggregator/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailAggregatorClient) Pull(ctx context.Context, in *MailboxGet, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/api.MailAggregator/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailAggregatorServer is the server API for MailAggregator service.
// All implementations must embed UnimplementedMailAggregatorServer
// for forward compatibility
type MailAggregatorServer interface {
	Create(context.Context, *MailboxCreate) (*MailboxOut, error)
	Get(context.Context, *MailboxGet) (*Mailboxes, error)
	Delete(context.Context, *MailboxId) (*Mailboxes, error)
	Pull(context.Context, *MailboxGet) (*Messages, error)
	mustEmbedUnimplementedMailAggregatorServer()
}

// UnimplementedMailAggregatorServer must be embedded to have forward compatible implementations.
type UnimplementedMailAggregatorServer struct {
}

func (UnimplementedMailAggregatorServer) Create(context.Context, *MailboxCreate) (*MailboxOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMailAggregatorServer) Get(context.Context, *MailboxGet) (*Mailboxes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMailAggregatorServer) Delete(context.Context, *MailboxId) (*Mailboxes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMailAggregatorServer) Pull(context.Context, *MailboxGet) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedMailAggregatorServer) mustEmbedUnimplementedMailAggregatorServer() {}

// UnsafeMailAggregatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailAggregatorServer will
// result in compilation errors.
type UnsafeMailAggregatorServer interface {
	mustEmbedUnimplementedMailAggregatorServer()
}

func RegisterMailAggregatorServer(s grpc.ServiceRegistrar, srv MailAggregatorServer) {
	s.RegisterService(&MailAggregator_ServiceDesc, srv)
}

func _MailAggregator_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailboxCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailAggregatorServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailAggregator/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailAggregatorServer).Create(ctx, req.(*MailboxCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailAggregator_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailboxGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailAggregatorServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailAggregator/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailAggregatorServer).Get(ctx, req.(*MailboxGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailAggregator_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailboxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailAggregatorServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailAggregator/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailAggregatorServer).Delete(ctx, req.(*MailboxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailAggregator_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailboxGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailAggregatorServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailAggregator/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailAggregatorServer).Pull(ctx, req.(*MailboxGet))
	}
	return interceptor(ctx, in, info, handler)
}

// MailAggregator_ServiceDesc is the grpc.ServiceDesc for MailAggregator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailAggregator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MailAggregator",
	HandlerType: (*MailAggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MailAggregator_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MailAggregator_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MailAggregator_Delete_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _MailAggregator_Pull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/mail.proto",
}
